// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: pb/dindin.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SlackActionsClient is the client API for SlackActions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlackActionsClient interface {
	EatingTomorrow(ctx context.Context, in *EatingTomorrowRequest, opts ...grpc.CallOption) (*EatingTomorrowResponse, error)
	Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error)
}

type slackActionsClient struct {
	cc grpc.ClientConnInterface
}

func NewSlackActionsClient(cc grpc.ClientConnInterface) SlackActionsClient {
	return &slackActionsClient{cc}
}

func (c *slackActionsClient) EatingTomorrow(ctx context.Context, in *EatingTomorrowRequest, opts ...grpc.CallOption) (*EatingTomorrowResponse, error) {
	out := new(EatingTomorrowResponse)
	err := c.cc.Invoke(ctx, "/pb.SlackActions/EatingTomorrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slackActionsClient) Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error) {
	out := new(PingMessage)
	err := c.cc.Invoke(ctx, "/pb.SlackActions/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlackActionsServer is the server API for SlackActions service.
// All implementations must embed UnimplementedSlackActionsServer
// for forward compatibility
type SlackActionsServer interface {
	EatingTomorrow(context.Context, *EatingTomorrowRequest) (*EatingTomorrowResponse, error)
	Ping(context.Context, *PingMessage) (*PingMessage, error)
	mustEmbedUnimplementedSlackActionsServer()
}

// UnimplementedSlackActionsServer must be embedded to have forward compatible implementations.
type UnimplementedSlackActionsServer struct {
}

func (UnimplementedSlackActionsServer) EatingTomorrow(context.Context, *EatingTomorrowRequest) (*EatingTomorrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EatingTomorrow not implemented")
}
func (UnimplementedSlackActionsServer) Ping(context.Context, *PingMessage) (*PingMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSlackActionsServer) mustEmbedUnimplementedSlackActionsServer() {}

// UnsafeSlackActionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlackActionsServer will
// result in compilation errors.
type UnsafeSlackActionsServer interface {
	mustEmbedUnimplementedSlackActionsServer()
}

func RegisterSlackActionsServer(s grpc.ServiceRegistrar, srv SlackActionsServer) {
	s.RegisterService(&SlackActions_ServiceDesc, srv)
}

func _SlackActions_EatingTomorrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EatingTomorrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackActionsServer).EatingTomorrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SlackActions/EatingTomorrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackActionsServer).EatingTomorrow(ctx, req.(*EatingTomorrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlackActions_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackActionsServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SlackActions/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackActionsServer).Ping(ctx, req.(*PingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// SlackActions_ServiceDesc is the grpc.ServiceDesc for SlackActions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SlackActions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SlackActions",
	HandlerType: (*SlackActionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EatingTomorrow",
			Handler:    _SlackActions_EatingTomorrow_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SlackActions_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/dindin.proto",
}
