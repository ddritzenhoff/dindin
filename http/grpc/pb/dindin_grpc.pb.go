// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: http/grpc/pb/dindin.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SlackActionsClient is the client API for SlackActions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlackActionsClient interface {
	EatingTomorrow(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	Ping(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*PingResponse, error)
	GetMembers(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (SlackActions_GetMembersClient, error)
	WeeklyUpdate(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	AssignCooks(ctx context.Context, in *AssignCooksRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	UpcomingCooks(ctx context.Context, in *UpcomingCooksRequest, opts ...grpc.CallOption) (*UpcomingCooksResponse, error)
}

type slackActionsClient struct {
	cc grpc.ClientConnInterface
}

func NewSlackActionsClient(cc grpc.ClientConnInterface) SlackActionsClient {
	return &slackActionsClient{cc}
}

func (c *slackActionsClient) EatingTomorrow(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/pb.SlackActions/EatingTomorrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slackActionsClient) Ping(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/pb.SlackActions/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slackActionsClient) GetMembers(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (SlackActions_GetMembersClient, error) {
	stream, err := c.cc.NewStream(ctx, &SlackActions_ServiceDesc.Streams[0], "/pb.SlackActions/GetMembers", opts...)
	if err != nil {
		return nil, err
	}
	x := &slackActionsGetMembersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SlackActions_GetMembersClient interface {
	Recv() (*GetMembersResponse, error)
	grpc.ClientStream
}

type slackActionsGetMembersClient struct {
	grpc.ClientStream
}

func (x *slackActionsGetMembersClient) Recv() (*GetMembersResponse, error) {
	m := new(GetMembersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slackActionsClient) WeeklyUpdate(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/pb.SlackActions/WeeklyUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slackActionsClient) AssignCooks(ctx context.Context, in *AssignCooksRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/pb.SlackActions/AssignCooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slackActionsClient) UpcomingCooks(ctx context.Context, in *UpcomingCooksRequest, opts ...grpc.CallOption) (*UpcomingCooksResponse, error) {
	out := new(UpcomingCooksResponse)
	err := c.cc.Invoke(ctx, "/pb.SlackActions/UpcomingCooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlackActionsServer is the server API for SlackActions service.
// All implementations must embed UnimplementedSlackActionsServer
// for forward compatibility
type SlackActionsServer interface {
	EatingTomorrow(context.Context, *EmptyMessage) (*EmptyMessage, error)
	Ping(context.Context, *EmptyMessage) (*PingResponse, error)
	GetMembers(*EmptyMessage, SlackActions_GetMembersServer) error
	WeeklyUpdate(context.Context, *EmptyMessage) (*EmptyMessage, error)
	AssignCooks(context.Context, *AssignCooksRequest) (*EmptyMessage, error)
	UpcomingCooks(context.Context, *UpcomingCooksRequest) (*UpcomingCooksResponse, error)
	mustEmbedUnimplementedSlackActionsServer()
}

// UnimplementedSlackActionsServer must be embedded to have forward compatible implementations.
type UnimplementedSlackActionsServer struct {
}

func (UnimplementedSlackActionsServer) EatingTomorrow(context.Context, *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EatingTomorrow not implemented")
}
func (UnimplementedSlackActionsServer) Ping(context.Context, *EmptyMessage) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSlackActionsServer) GetMembers(*EmptyMessage, SlackActions_GetMembersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMembers not implemented")
}
func (UnimplementedSlackActionsServer) WeeklyUpdate(context.Context, *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WeeklyUpdate not implemented")
}
func (UnimplementedSlackActionsServer) AssignCooks(context.Context, *AssignCooksRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignCooks not implemented")
}
func (UnimplementedSlackActionsServer) UpcomingCooks(context.Context, *UpcomingCooksRequest) (*UpcomingCooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpcomingCooks not implemented")
}
func (UnimplementedSlackActionsServer) mustEmbedUnimplementedSlackActionsServer() {}

// UnsafeSlackActionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlackActionsServer will
// result in compilation errors.
type UnsafeSlackActionsServer interface {
	mustEmbedUnimplementedSlackActionsServer()
}

func RegisterSlackActionsServer(s grpc.ServiceRegistrar, srv SlackActionsServer) {
	s.RegisterService(&SlackActions_ServiceDesc, srv)
}

func _SlackActions_EatingTomorrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackActionsServer).EatingTomorrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SlackActions/EatingTomorrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackActionsServer).EatingTomorrow(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlackActions_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackActionsServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SlackActions/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackActionsServer).Ping(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlackActions_GetMembers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SlackActionsServer).GetMembers(m, &slackActionsGetMembersServer{stream})
}

type SlackActions_GetMembersServer interface {
	Send(*GetMembersResponse) error
	grpc.ServerStream
}

type slackActionsGetMembersServer struct {
	grpc.ServerStream
}

func (x *slackActionsGetMembersServer) Send(m *GetMembersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SlackActions_WeeklyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackActionsServer).WeeklyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SlackActions/WeeklyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackActionsServer).WeeklyUpdate(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlackActions_AssignCooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignCooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackActionsServer).AssignCooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SlackActions/AssignCooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackActionsServer).AssignCooks(ctx, req.(*AssignCooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlackActions_UpcomingCooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpcomingCooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackActionsServer).UpcomingCooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SlackActions/UpcomingCooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackActionsServer).UpcomingCooks(ctx, req.(*UpcomingCooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SlackActions_ServiceDesc is the grpc.ServiceDesc for SlackActions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SlackActions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SlackActions",
	HandlerType: (*SlackActionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EatingTomorrow",
			Handler:    _SlackActions_EatingTomorrow_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SlackActions_Ping_Handler,
		},
		{
			MethodName: "WeeklyUpdate",
			Handler:    _SlackActions_WeeklyUpdate_Handler,
		},
		{
			MethodName: "AssignCooks",
			Handler:    _SlackActions_AssignCooks_Handler,
		},
		{
			MethodName: "UpcomingCooks",
			Handler:    _SlackActions_UpcomingCooks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMembers",
			Handler:       _SlackActions_GetMembers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "http/grpc/pb/dindin.proto",
}
